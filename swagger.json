{
  "swagger" : "2.0",
  "info" : {
    "description" : "REST API resources for create, retrieve, and update of Salesforce data. [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/58ab66c93ceb3e845b70)",
    "version" : "1.0.2",
    "title" : "Four Seasons SF REST API"
  },
  "host" : "four-seasons--QA.cs99.my.salesforce.com",
  "basePath" : "/services/apexrest/",
  "tags" : [ {
    "name" : "Digital Platform",
    "description" : "Access to Property Owned"
  }, {
    "name" : "KEY guests",
    "description" : "Access to KEY concierge guests"
  }, {
    "name" : "KEY requests",
    "description" : "Access to KEY concierge requests"
  }, {
    "name" : "RESI requests",
    "description" : "Access to Golden HOME requests"
  }, {
    "name" : "RESI units* Description",
    "description" : "Access to Golden HOME units"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/v1/key/guests/{goldenId}/requests" : {
      "get" : {
        "tags" : [ "KEY guests" ],
        "summary" : "Retrieve requests by Golden Id",
        "description" : "Retrieves requests by Golden Id. Optional to also filter by property code, stay confirmathis API is used to create a common areaion number, request date, request status, and request type.",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "goldenId",
          "in" : "path",
          "description" : "Golden Id of guest to return",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-separated list of one or more fields to return in the response",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        }, {
          "name" : "property",
          "in" : "query",
          "description" : "Property code  (e.g. TFY, MAR)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "confirmation",
          "in" : "query",
          "description" : "Stay confirmation number",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "onOrAfter",
          "in" : "query",
          "description" : "Request date in \"yyyy-MM-dd\" format",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "onOrBefore",
          "in" : "query",
          "description" : "Request date in \"yyyy-MM-dd\" format",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "requestStatus",
          "in" : "query",
          "description" : "Request status",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "requestSubType",
          "in" : "query",
          "description" : "Request sub-type in Salesforce record type developername format",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Request_KEY"
              }
            }
          },
          "400" : {
            "description" : "Invalid input, object invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "Guest not found",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          }
        }
      }
    },
    "/v1/key/requests" : {
      "post" : {
        "tags" : [ "KEY requests" ],
        "summary" : "Create a new KEY concierge request",
        "description" : "If the caller is unable to populate any required lookup with proper Salesforce record Id, populate **mappings** with lookup-name/alternate-Id pair(s) for server-side resolution. \r\n\u0000\r\n\n### Supported Lookup Fields\n* AccountId (Golden Id) \r\n\u0000\r\n * Currency__c (Currency Code) \r\n\u0000\r\n * RecordTypeId (Sub Request DeveloperName) \r\n\u0000\r\n * Stay_Information__c (Confirmation Number) \r\n\u0000\r\n * Vendor__c (Vendor External Id) ",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "Body",
          "description" : "Contains the Case object to be created and the optional map of lookup-name/alternate-Id pairs",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WrapperContainer_KEY"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Request created",
            "schema" : {
              "$ref" : "#/definitions/CreateResponse"
            }
          },
          "400" : {
            "description" : "Invalid input, object invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "KEY requests" ],
        "summary" : "Update a KEY concierge request",
        "description" : "If the caller is unable to populate any required lookup with proper Salesforce record Id, populate **mappings** with lookup-name/alternate-Id pair(s) for server-side resolution. \r\n\u0000\r\n If Id field of the request object isn't populated, the API will attempt to resolve it using CaseNumber.\n### Supported Lookup Fields\n* AccountId (Golden Id) \r\n\u0000\r\n * Currency__c (Currency Code) \r\n\u0000\r\n * Id (Case Number) \r\n\u0000\r\n * RecordTypeId (Sub Request DeveloperName) \r\n\u0000\r\n * Stay_Information__c (Confirmation Number) \r\n\u0000\r\n * Vendor__c (Vendor Id) ",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "RequestWrapper",
          "description" : "Contains the Case object to be updated and the optional map of lookup-name/alternate-Id pairs",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WrapperContainer_KEY"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation"
          },
          "400" : {
            "description" : "Invalid input, object invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "Request not found"
          }
        }
      }
    },
    "/v1/resi/units/{recordId}" : {
      "get" : {
        "tags" : [ "RESI units" ],
        "summary" : "Get unit information by record Id.",
        "description" : "Fetch unit information based on unit record id.",
        "parameters" : [ {
          "name" : "recordId",
          "in" : "path",
          "description" : "Unit record Id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-separated list of one or more fields to return in response",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Unit"
            }
          },
          "400" : {
            "description" : "Invalid input, object invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "Record not found",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          }
        }
      }
    },
    "/v1/resi/units/{recordId}/requests" : {
      "get" : {
        "tags" : [ "RESI units" ],
        "summary" : "Get requests (Home Instructions, Home Requests) based on unit record Id.",
        "description" : "Fetch requests of type Home Instructions/Rrequests by passing unit id.",
        "parameters" : [ {
          "name" : "recordId",
          "in" : "path",
          "description" : "Unit record Id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "fields",
          "in" : "query",
          "description" : "Comma-separated list of one or more fields to return in response",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/Request_RESI"
            }
          },
          "400" : {
            "description" : "Invalid input, object invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "Record not found",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          }
        }
      }
    },
    "/v1/resi/unitsearch" : {
      "post" : {
        "tags" : [ "RESI units" ],
        "summary" : "This endpoint is used to retrieve a resident's property owned Id, unit Id and account Id",
        "description" : "Retrieves property owned records by passing the property code, the resident's first and last name plus their unit number. All these data points are required and must be exact matches for record(s) to be found.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "Body",
          "description" : "Contains the Unit Search object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WrapperContainer_UnitSearch"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The search was successful and found at least 1 matching record.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PropertyOwned"
              }
            }
          },
          "400" : {
            "description" : "Invalid input, object invalid, missing required field",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "Record not found",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          }
        }
      }
    },
    "/v1/resi/properties/{propertyCode}/residents" : {
      "get" : {
        "tags" : [ "RESI units" ],
        "summary" : "This endpoint is used to retrieve all residents for the property code with their unit number, first name and last name being returned",
        "description" : "Retrieves property owned records by passing the property code, property code must be passed .",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "propertyCode",
          "in" : "path",
          "description" : "Property Code String",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/propertyResidents"
              }
            }
          },
          "400" : {
            "description" : "Invalid input, object invalid, missing required field",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "No Records found",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          }
        }
      }
    },
    "/v1/resi/{recordType}/picklist-values" : {
      "get" : {
        "tags" : [ "RESI units" ],
        "summary" : "This endpoint is used to retrieve the supported picklist values based on the SFDC RecordType.",
        "description" : "Use this resource to get the values for all the picklist fields of the HOME_Requests record type. This resource is especially useful for getting category and status picklist values. These picklist values do not change often as such it is recommended that this result be cached to reduce the number of API request per day. Supported Record Types: 1. HOME_Requests 2. Home_Instructions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "recordType",
          "in" : "path",
          "description" : "The SFDC Record Type API name",
          "required" : true,
          "type" : "string",
          "enum" : [ "HOME_Requests", "Home_Instructions" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/PicklistValuesCollection"
            }
          },
          "400" : {
            "description" : "Invalid input, object invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "Record not found",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          }
        }
      }
    },
    "/v1/resi/properties-owned/{propertyOwnedId}/" : {
      "get" : {
        "tags" : [ "Digital Platform" ],
        "summary" : "Retrieve resident information by property Owned Id",
        "description" : "Retrieves information by property owned Id\n### Resident Detail\n* Returns the resident's personal information like preferred email, phone, type of resident and a link to the resident's profile photo \r\n\u0000\r\n * Response Node Key: 'Resident'\n### Common area bookings\n* Returns bookings that are Approved or Requested \r\n\u0000\r\n * Bookings are returned that happened in the last 45 days \r\n\u0000\r\n * Bookings that are happening in the next year(365 days) are returned \r\n\u0000\r\n * Response Node Key: 'Common_Area_Bookings'\n### Requests\n* Returns Home requests and Home instructions that are visible to the resident \r\n\u0000\r\n * Requests are returned that happened in the last 45 days \r\n\u0000\r\n * Requests that are happening in the next year(365 days) are returned \r\n\u0000\r\n * Response Node Key: 'Requests'\n### Notification Preference\n* Returns the resident's notification preference as a boolean flag indicating what types of request the resident wants to be notified about \r\n\u0000\r\n * Returns the type of notification the resident wants to receives. Currently only Email is supported. \r\n\u0000\r\n * Response Node Key: 'Notification_Preference' \r\n\u0000\r\n\n### Pets\n* Returns a list of the pets that are assigned to the resident \r\n\u0000\r\n * Each pet record has the pets details like name, category, notes and insuranc dates. Response Node Key: 'Pet__c' \r\n\u0000\r\n * Each pet record has a single profile photo. Response Node Key: 'profilePhoto' \r\n\u0000\r\n * Each pet record has a little for supporting attachments (ie. insurance documents). Respone Node Key: 'attachments' \r\n\u0000\r\n * Response Node Key: 'Pets' \r\n\u0000\r\n\n### Vehicles Owned\n* Returns a list of vehicles owned assigned to the resident \r\n\u0000\r\n * Each Vehicle record has details such as Make, Vehicle Type, Model. \r\n\u0000\r\n * Inside Vehicles_Owned there is a Node Key: 'profilePhoto' this will store the vehicles image. \r\n\u0000\r\n * There is also a Node Key: 'Vehicle_Drivers' that stores all the drivers assigned to the vehicle along with their photo \r\n\u0000\r\n * Response Node Key: 'Vehicles_Owned' \r\n\u0000\r\n * Ignore Resident_Connections__r node inside Vehicles_Owned Node \r\n\u0000\r\n * Vehicle_Drivers will store the Driver photo and Name if there is no photo it will be null \r\n\u0000\r\n\n",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "propertyOwnedId",
          "in" : "path",
          "description" : "Property Owned Id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/propertyOwnedInfo"
            }
          },
          "400" : {
            "description" : "Invalid input, object invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "Record not found",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PropertyOwnedNoRecordFound"
              }
            }
          }
        }
      }
    },
    "/v1/resi/properties-owned/{propertyOwnedId}/requests" : {
      "get" : {
        "tags" : [ "Digital Platform" ],
        "summary" : "(Deprecating) Use /v1/resi/properties-owned/{propertyOwnedId}",
        "description" : "\n### Deprecating Use: /v1/resi/properties-owned/{propertyOwnedId}/\n### Ignore Resident_Connections__r node inside Vehicles_Owned Node\nVehicle_Drivers will store the Driver photo and Name if there is no photo it will be null ",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "propertyOwnedId",
          "in" : "path",
          "description" : "Property Owned Id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/propertyOwnedInfo"
            }
          },
          "400" : {
            "description" : "Invalid input, object invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "Record not found",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PropertyOwnedNoRecordFound"
              }
            }
          }
        }
      }
    },
    "/v1/resi/properties-owned/{propertyOwnedId}/common-areas" : {
      "get" : {
        "tags" : [ "Digital Platform" ],
        "summary" : "Retrieve common areas that are viewable to residents by property owned Id",
        "description" : "This API will return all the common areas that are visible to residents by property Owned Id\n\nThe common areas will be filtered by the property and property owned location which are retrieved from the property owned ",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "propertyOwnedId",
          "in" : "path",
          "description" : "Property Owned Id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfull operation",
            "schema" : {
              "$ref" : "#/definitions/commonAreasInfo"
            }
          },
          "400" : {
            "description" : "Invalid input, object invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "Record not found",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PropertyOwnedNoRecordFound"
              }
            }
          }
        }
      }
    },
    "/v1/resi/properties/{propertyId}/common-areas" : {
      "get" : {
        "tags" : [ "Digital Platform" ],
        "summary" : "Retrieve common areas that are viewable to residents by property id",
        "description" : "This API will return all the common areas that are visible to residents by property Id\nA location Id can also be passed in the query to filter by property and location. Location Id is optional\nIf only a property Id is passed, the locations of the common areas are ignored\n\n",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "propertyId",
          "in" : "path",
          "description" : "Property Id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "locationId",
          "in" : "query",
          "description" : "location Id",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfull operation",
            "schema" : {
              "$ref" : "#/definitions/commonAreasInfo"
            }
          },
          "400" : {
            "description" : "Invalid input, object invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "Record not found",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PropertyRecordNotFound"
              }
            }
          }
        }
      }
    },
    "/v1/resi/properties-owned/{propertyOwnedId}/home-owner-association" : {
      "get" : {
        "tags" : [ "Digital Platform" ],
        "summary" : "Get requests (Home Instructions, Home Requests) based on unit record Id.",
        "description" : "This API will return the Home owner association details matched to the property owned id passed through.\n### Home_Owner_Association_Members\n* Returns list of Home owner association members that are active \r\n\u0000\r\n\n\n",
        "parameters" : [ {
          "name" : "propertyOwnedId",
          "in" : "path",
          "description" : "Property Owned Id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/HOME_OWNER_ASSOCIATION_GET"
            }
          },
          "400" : {
            "description" : "Invalid input, object invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "Record not found",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PropertyOwnedNoRecordFound"
              }
            }
          }
        }
      }
    },
    "/v1/resi/common-area/{commonAreaId}/bookings" : {
      "get" : {
        "tags" : [ "Digital Platform" ],
        "summary" : "Retrieve Common area bookings for a specified date range",
        "description" : "This API will return all the common area bookings for the specified dates.\nEach booking will return the start time, end time, property owned id and the date it is booked on.\n### Example\n* startDate 10/05/2019 \r\n\u0000\r\n * The Start date will begin on 10/05/2019 00:00:00 \r\n\u0000\r\n * endDate 10/05/2019 \r\n\u0000\r\n * The end date will be until 10/05/2019 23:59:59\n\n",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "commonAreaId",
          "in" : "path",
          "description" : "Common Area Id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startDate",
          "in" : "query",
          "description" : "Start date",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "End Date",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/commonAreaBookings"
            }
          },
          "400" : {
            "description" : "Invalid input, object invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "Record not found",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/commonAreaRecordNotFound"
              }
            }
          }
        }
      }
    },
    "/v1/resi/file/{fileId}/" : {
      "get" : {
        "tags" : [ "Digital Platform" ],
        "summary" : "Retrieves the file's content as Base64 Binary stream for the file id passed in.",
        "description" : " The file's content is only available to the API after one of the other API endpoints like /v1/resi/properties-owned/{propertyOwnedId}/ has returned the file detail.\n\n(File Detail)  All files will be represented with the following 4 attributes:\n1. **url**: This is the endpoint for retrieving the file's content (You will used this value to call this API).\n2. **size**: the number of bytes\n3. **name**: the name of the file in Salesforce\n4. **extension**: the file's extension type\n\nThere is an expiration period which is currently set to 60 minutes; however, this is adjustable by Salesforce System admins as needed. If you try to access this endpoint to retrieve the file's content after the expiration period, you will receive an error. The expiration period is refreshed each time you retrieve the main record which the file is associated with. So, the expiration period is X minutes from the last time you retrieved the file's related record.\n",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fileId",
          "in" : "path",
          "description" : "This is the id of the file to retrieve. This id will be included in the relative path detail ('url') from a previous endpoint call.\n## For example:\n* If you are working with a resident's profile photo, you will receive the path needed to make this call from the Resident.profilePhoto.url node of the /v1/resi/properties-owned/{propertyOwnedId}/ endpoint.\n* If you are working with an attachment from a request, you will recieve the path needed to make this call from the Requests[x].attachments[x].url node of the /v1/resi/properties-owned/{propertyOwnedId}/ endpoint.\n",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation - results in binary dump of the file's content"
          },
          "400" : {
            "description" : "Invalid input, object invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "Record not found or Expired",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/fileNotFound"
              }
            }
          }
        }
      }
    },
    "/v1/resi/properties-owned/{propertyOwnedId}/documents" : {
      "get" : {
        "tags" : [ "Digital Platform" ],
        "summary" : "Retrieve documents that are viewable to residents by property owned Id",
        "description" : "This API will return all the unit documents, resident documents and the property wide documents that are visible to residents by property Owned Id\n\nEach document record will have the category, type of document and the following 4 attributes about the file:\n1. **url**: This is the endpoint for retrieving the file's content (You will used this value to call the file retrieve API).\n2. **size**: the number of bytes\n3. **name**: the name of the file in Salesforce\n4. **extension**: the file's extension type\n\n\n### Unit Documents\n* Returns documents which are assigned to the resident's (based on the property owned id passed in) unit and has visible to resident set to true \r\n\u0000\r\n * Response Node Key: 'Unit_Documents'\n### Resident Documents\n* Returns documents which are assigned specifically to the resident (based on the property owned id passed in) and has visible to resident set to true \r\n\u0000\r\n * Response Node Key: 'Resident_Documents'\n",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "propertyOwnedId",
          "in" : "path",
          "description" : "Property Owned Id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfull operation",
            "schema" : {
              "$ref" : "#/definitions/documentLibraryInfo"
            }
          },
          "400" : {
            "description" : "Invalid input, object invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "Record not found",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/PropertyOwnedNoRecordFound"
              }
            }
          }
        }
      }
    },
    "/v1/resi/common-area" : {
      "post" : {
        "tags" : [ "Digital Platform" ],
        "summary" : "Create a common area",
        "description" : "This API is used to create a common area\n\n### Required fields\n* Description \r\n\u0000\r\n * Property_Owned__c \r\n\u0000\r\n * Common_Area__c \r\n\u0000\r\n * Status \r\n\u0000\r\n * time__c \r\n\u0000\r\n * End_Time__c \r\n\u0000\r\n * Request_date__c \r\n\u0000\r\n * End_Date__c \r\n\u0000\r\n\n",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "Body",
          "description" : "Contains Common Area Information for the case to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RequestWrapper_CommonArea"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Case Created",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/CreateResponse"
              }
            }
          },
          "400" : {
            "description" : "Invalid input, object invalid, missing required field",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          }
        }
      }
    },
    "/v1/resi/profilephoto/" : {
      "post" : {
        "tags" : [ "Digital Platform" ],
        "summary" : "Upload 'profile' photo",
        "description" : "This endpoint is used to add or replace an existing 'profile' photo for the Salesforce record ID that is passed in. If there is an existing profile photo the previous version is deleted from Salesforce.\nCurrently the following objects support 'profile' photo uploads:\n1. Account (Resident)\n2. Pet__c\n3. Vehicle__c\n\nCurrently these are the supported file extenstions: png and jpg\n\nThe maximum file size is 5 MB, recommended size is less than 3 MB.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "Body",
          "description" : "Contains the fileUpload object (converted binary into base64)",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WrapperContainer_FileUplod"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The file was successfully uploaded.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/fileUploadSuccess"
              }
            }
          },
          "400" : {
            "description" : "Invalid input, object invalid, missing required field",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "Record not OR Profile Photo upload not supported",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          }
        }
      }
    },
    "/v1/resi/attachment/" : {
      "post" : {
        "tags" : [ "Digital Platform" ],
        "summary" : "Upload file attachment",
        "description" : "This endpoint is used to add a file to the Salesforce record ID that is passed in.\nCurrently the following objects support attachment uploads:\n1. Pet__c\n2. Case (HOME Requests / HOME Instructions)\n\nThe maximum file size is 5 MB, recommended size is less than 3 MB.",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "Body",
          "description" : "Contains the fileUpload object (converted binary into base64)",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WrapperContainer_FileUplod"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The file was successfully uploaded.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/fileUploadSuccess"
              }
            }
          },
          "400" : {
            "description" : "Invalid input, object invalid, missing required field",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "Record not OR attachment upload not supported",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          }
        }
      }
    },
    "/v1/resi/notification-preference/" : {
      "post" : {
        "tags" : [ "Digital Platform" ],
        "summary" : "Creates a notification preference for the resident",
        "description" : "This endpoint is used to create a new notification preference for a resident. Currently the only notification type supported in Email. There are several flags to enroll the resident into notification for different category of requests. If the flag is set to 'True' the resident will be emailed when when any request of that category type enters into the status for email send.\nCurrently the supported types are:\n1. Common_Area_Bookings__c (Common Area Bookings)\n2. Grocery_items__c (Grocery)\n3. Laundry_Dry_Cleaning__c (Laundry and Dry Cleaning)\n4. Pick_up__c (Pick up)\n5. Vehicle_Services__c (Vehicle Services)\n6. Unit_Access__c (Unit Access)\n7. Florists_Plants__c (Florists and Plants)\n8. Keys__c (Keys)\n9. Packages_and_Deliveries__c (Packages and Deliveries)\n10. Resident_Pick_ups__c (Resident Pick Ups)\n11. Resident_Purchase_and_Errands__c (Resident Purchase and Errands)\n\nNote: A resident can only have 1 notification preference per unit. If changes are needed, use to PATCH endpoint (/v1/resi/notification-preference/) to update the existing record. If you try to add a new notification and one already exists you will be presented with the following error 'A notification already exists for this resident's property owned record'\n\nNote: A resident must have a preferred email address set on their property owned record as a prerequisite for a notification preference addition. If the email is not present on the property owned record wou will be presented with the following error 'A email address is required on the property owned record for this resident to subscribe to Email notifications.';\n\nRequired Fields: Property_Owned__c and Notify_By__c. Set Notify_By__c to Email as this is currently the only supported type.\n",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "Body",
          "description" : "Contains the notification preference details",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WrapperContainer_Notification"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "This will indicate that the new notification was successfully created.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/notificationSuccess"
              }
            }
          },
          "400" : {
            "description" : "Invalid input, object invalid, missing required field, or a notification already exists for the property owned record",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "Property owned record not found",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          }
        }
      }
    },
    "/v1/resi/notification-preference" : {
      "patch" : {
        "tags" : [ "Digital Platform" ],
        "summary" : "Update an existing notification preference for the resident",
        "description" : "This endpoint is used to update an existig notification preference for a resident. Currently the only notification type supported in Email. There are several flags to enroll the resident into notification for different category of requests. If the flag is set to 'True' the resident will be emailed when when any request of that category type enters into the status for email send.\nCurrently the supported types are:\n1. Common_Area_Bookings__c (Common Area Bookings)\n2. Grocery_items__c (Grocery)\n3. Laundry_Dry_Cleaning__c (Laundry and Dry Cleaning)\n4. Pick_up__c (Pick up)\n5. Vehicle_Services__c (Vehicle Services)\n6. Unit_Access__c (Unit Access)\n7. Florists_Plants__c (Florists and Plants)\n8. Keys__c (Keys)\n9. Packages_and_Deliveries__c (Packages and Deliveries)\n10. Resident_Pick_ups__c (Resident Pick Ups)\n11. Resident_Purchase_and_Errands__c (Resident Purchase and Errands)\n\nNote: A resident must have a preferred email address set on their property owned record as a prerequisite for a notification preference addition. If the email is not present on the property owned record wou will be presented with the following error 'A email address is required on the property owned record for this resident to subscribe to Email notifications.';\n\nRequired Fields: Id\n",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "Body",
          "description" : "Contains the notification preference details",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WrapperContainer_Notification_Update"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Update was successful."
          },
          "400" : {
            "description" : "Invalid input, object invalid, missing required field, or a notification already exists for the property owned record",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "Property owned record not found",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          }
        }
      }
    },
    "/v1/resi/file/{fileId}" : {
      "delete" : {
        "tags" : [ "Digital Platform" ],
        "summary" : "Deletes the file based on the file id passed in.",
        "description" : " The file's id is only available to the API after one of the other API endpoints like /v1/resi/properties-owned/{propertyOwnedId}/ has returned the file detail.\n\n(File Detail)  All files will be represented with the following 4 attributes:\n1. **url**: This is the endpoint for retrieving the file's content (You will used this value to call this API).\n2. **size**: the number of bytes\n3. **name**: the name of the file in Salesforce\n4. **extension**: the file's extension type\n\nThere is an expiration period which is currently set to 60 minutes; however, this is adjustable by Salesforce System admins as needed. If you try to access this endpoint to delete the file after the expiration period, you will receive an error. The expiration period is refreshed each time you retrieve the main record which the file is associated with. So, the expiration period is X minutes from the last time you retrieved the file's related record.\n",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fileId",
          "in" : "path",
          "description" : "This is the id of the file to delete. This id will be included in the relative path detail ('url') from a previous endpoint call.\n## For example:\n* If you are working with a resident's profile photo, you will receive the path needed to make this call from the Resident.profilePhoto.url node of the /v1/resi/properties-owned/{propertyOwnedId}/ endpoint.\n* If you are working with an attachment from a request, you will recieve the path needed to make this call from the Requests[x].attachments[x].url node of the /v1/resi/properties-owned/{propertyOwnedId}/ endpoint.\n",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successful operation"
          },
          "400" : {
            "description" : "Invalid input, object invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "Record not found or Expired or User does not have delete rights",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/fileNotFound"
              }
            }
          }
        }
      }
    },
    "/v1/resi/requests" : {
      "post" : {
        "tags" : [ "RESI requests" ],
        "summary" : "Create a new RESI requesst (Home Instruction, Home Requests)",
        "description" : "Create a new request. Only Home Instruction/Request record types are supported.\n### RecordType name\n1. Home Instructions \r\n\u0000\r\n 2. Home Requests \r\n\u0000\r\n\n### Required fields for Home Instructions-\n* Description \r\n\u0000\r\n * Category__c \r\n\u0000\r\n * Property_lkp__c \r\n\u0000\r\n * Unit__c \r\n\u0000\r\n * Property_Owned__c \r\n\u0000\r\n * AccountId\n### Required fields for Home Request\n* Property_lkp__c \r\n\u0000\r\n * Unit__c \r\n\u0000\r\n * AccountId\nCase_Origin__c with Am passed is required for both record types\n### Digital Platform\nWhen Creating a Home request or Home instruction through the mobile app the following fields are required in the body as well\n* Created_By_Digital_Platform_User__c (User from the app that created the request) \r\n\u0000\r\n * Visible_to_Residents__c: true (When the resident should be able to view it on the app) \r\n\u0000\r\n\n### Supported Lookup Fields\n* AccountId (Golden Id) \r\n\u0000\r\n * Currency__c (Currency Code) \r\n\u0000\r\n * RecordTypeId (Sub Request DeveloperName) \r\n\u0000\r\n * Stay_Information__c (Reservation Number) \r\n\u0000\r\n * Vendor__c (Vendor External Id) ",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "Body",
          "description" : "Contains the Case object to be created and the optional map of lookup-name/alternate-Id pairs",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WrapperContainer_RESI"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Case created",
            "schema" : {
              "$ref" : "#/definitions/CreateResponse"
            }
          },
          "400" : {
            "description" : "Invalid input, object invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "RESI requests" ],
        "summary" : "Update a request (Home Instruction, Home Requests)",
        "description" : "Update case information. Only record types Home Instructions & Home Requests are supported. RecordType names\n* Home Instructions  \r\n\u0000\r\n * Home Requests \r\n\u0000\r\n\n### Digital Platform\nWhen Updating a Home request or Home instruction through the mobile app the following fields are required in the body as well\n* Last_Modified_By_Digital_Platform_User__c (App user who is modifying an existing Request) \r\n\u0000\r\n * Digital_Platform_User_Last_Modified_Date__c (Date Request is modified by the app user) \r\n\u0000\r\n\nRequired fields for Home Instructions- Description, Category__c, Property_lkp__c ,Unit__c, Property_Owned__c\nRequired fields for Home Request- Property_lkp__c, Unit__c\nIf the caller is unable to populate any required lookup with proper Salesforce record Id, populate **mappings** with lookup-name/alternate-Id pair(s) for server-side resolution. \r\n\u0000\r\n If Id field of the request object isn't populated, the API will attempt to resolve it using CaseNumber.\n### Supported Lookup Fields\n* AccountId (Golden Id) \r\n\u0000\r\n * Currency__c (Currency Code) \r\n\u0000\r\n * Id (Case Number) \r\n\u0000\r\n * RecordTypeId (Sub Request DeveloperName) \r\n\u0000\r\n * Stay_Information__c (Reservation Number) \r\n\u0000\r\n * Vendor__c (Vendor External Id) ",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "Body",
          "description" : "Contains the Case object to be updated and the optional map of lookup-name/alternate-Id pairs",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/WrapperContainer_RESI_Update"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation"
          },
          "400" : {
            "description" : "Invalid input, object invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "401" : {
            "description" : "Session expired or invalid",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          },
          "404" : {
            "description" : "No such case found",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExceptionResponse"
              }
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "WrapperContainer_KEY" : {
      "type" : "object",
      "required" : [ "requestWrapper" ],
      "properties" : {
        "requestWrapper" : {
          "$ref" : "#/definitions/RequestWrapper_KEY"
        }
      }
    },
    "RequestWrapper_KEY" : {
      "type" : "object",
      "required" : [ "request" ],
      "properties" : {
        "request" : {
          "$ref" : "#/definitions/Request_KEY"
        },
        "mappings" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string",
            "example" : "alternateId"
          }
        }
      }
    },
    "Request_KEY" : {
      "type" : "object",
      "required" : [ "AccountId", "Case_Origin__c", "Id", "Property__c", "RecordTypeId" ],
      "properties" : {
        "Id" : {
          "type" : "string"
        },
        "AccountId" : {
          "type" : "string"
        },
        "CaseNumber" : {
          "type" : "string"
        },
        "Case_Origin__c" : {
          "type" : "string"
        },
        "Property__c" : {
          "type" : "string"
        },
        "RecordTypeId" : {
          "type" : "string"
        },
        "more... (omitted)" : {
          "type" : "string"
        }
      },
      "example" : {
        "Id" : "5000i000000cfd8AAA",
        "Case_Origin__c" : "AM",
        "Charge_To__c" : "Charge to Room",
        "Property__c" : "TFY",
        "Time__c" : "10:24:00.000Z",
        "Request_Date__c" : "2019-01-15",
        "Status" : "Open",
        "CaseNumber" : "00071655"
      }
    },
    "WrapperContainer_RESI" : {
      "type" : "object",
      "required" : [ "requestWrapper" ],
      "properties" : {
        "requestWrapper" : {
          "$ref" : "#/definitions/RequestWrapper_RESI"
        }
      }
    },
    "RequestWrapper_RESI" : {
      "type" : "object",
      "required" : [ "request" ],
      "properties" : {
        "request" : {
          "$ref" : "#/definitions/Request_RESI_POST"
        },
        "mappings" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string",
            "example" : "alternateId"
          }
        }
      }
    },
    "WrapperContainer_RESI_Update" : {
      "type" : "object",
      "required" : [ "requestWrapper" ],
      "properties" : {
        "requestWrapper" : {
          "$ref" : "#/definitions/RequestWrapper_RESI_Update"
        }
      }
    },
    "RequestWrapper_RESI_Update" : {
      "type" : "object",
      "required" : [ "request" ],
      "properties" : {
        "request" : {
          "$ref" : "#/definitions/Request_RESI_Update"
        },
        "mappings" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string",
            "example" : "alternateId"
          }
        }
      }
    },
    "RequestWrapper_CommonArea" : {
      "type" : "object",
      "required" : [ "requestWrapper" ],
      "properties" : {
        "requestWrapper" : {
          "$ref" : "#/definitions/Request_CommonArea"
        }
      }
    },
    "WrapperContainer_Notification" : {
      "type" : "object",
      "required" : [ "requestWrapper" ],
      "properties" : {
        "requestWrapper" : {
          "$ref" : "#/definitions/RequestWrapper_Notification"
        }
      }
    },
    "WrapperContainer_Notification_Update" : {
      "type" : "object",
      "required" : [ "requestWrapper" ],
      "properties" : {
        "requestWrapper" : {
          "$ref" : "#/definitions/RequestWrapper_Notification_Update"
        }
      }
    },
    "RequestWrapper_Notification" : {
      "type" : "object",
      "required" : [ "notificationPreference" ],
      "properties" : {
        "notificationPreference" : {
          "$ref" : "#/definitions/Notification_RESI"
        }
      }
    },
    "RequestWrapper_Notification_Update" : {
      "type" : "object",
      "required" : [ "notificationPreference" ],
      "properties" : {
        "notificationPreference" : {
          "$ref" : "#/definitions/Notification_RESI_Update"
        }
      }
    },
    "Notification_RESI" : {
      "type" : "object",
      "required" : [ "Notify_By__c", "Property_Owned__c" ],
      "properties" : {
        "Property_Owned__c" : {
          "type" : "string"
        },
        "Notify_By__c" : {
          "type" : "string"
        },
        "Common_Area_Bookings__c" : {
          "type" : "boolean"
        },
        "Grocery_items__c" : {
          "type" : "boolean"
        },
        "Laundry_Dry_Cleaning__c" : {
          "type" : "boolean"
        },
        "Pick_up__c" : {
          "type" : "boolean"
        },
        "Vehicle_Services__c" : {
          "type" : "boolean"
        },
        "Unit_Access__c" : {
          "type" : "boolean"
        },
        "Florists_Plants__c" : {
          "type" : "boolean"
        },
        "Keys__c" : {
          "type" : "boolean"
        },
        "Packages_and_Deliveries__c" : {
          "type" : "boolean"
        },
        "Resident_Pick_ups__c" : {
          "type" : "boolean"
        },
        "Resident_Purchase_and_Errands__c" : {
          "type" : "boolean"
        }
      }
    },
    "Notification_RESI_Update" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "string"
        },
        "Common_Area_Bookings__c" : {
          "type" : "boolean"
        },
        "Grocery_items__c" : {
          "type" : "boolean"
        },
        "Laundry_Dry_Cleaning__c" : {
          "type" : "boolean"
        },
        "Pick_up__c" : {
          "type" : "boolean"
        },
        "Vehicle_Services__c" : {
          "type" : "boolean"
        },
        "Unit_Access__c" : {
          "type" : "boolean"
        },
        "Florists_Plants__c" : {
          "type" : "boolean"
        },
        "Keys__c" : {
          "type" : "boolean"
        },
        "Packages_and_Deliveries__c" : {
          "type" : "boolean"
        },
        "Resident_Pick_ups__c" : {
          "type" : "boolean"
        },
        "Resident_Purchase_and_Errands__c" : {
          "type" : "boolean"
        }
      }
    },
    "WrapperContainer_FileUplod" : {
      "type" : "object",
      "required" : [ "requestWrapper" ],
      "properties" : {
        "requestWrapper" : {
          "$ref" : "#/definitions/RequestWrapper_FileUpload"
        }
      }
    },
    "RequestWrapper_FileUpload" : {
      "type" : "object",
      "required" : [ "fileUpload" ],
      "properties" : {
        "fileUpload" : {
          "$ref" : "#/definitions/FileUpload_RESI"
        }
      }
    },
    "FileUpload_RESI" : {
      "type" : "object",
      "required" : [ "base64Content", "pathOnClient", "relatedSFDCRecordId", "title" ],
      "properties" : {
        "relatedSFDCRecordId" : {
          "type" : "string",
          "description" : "The record id the file should be attached to in Salesforce."
        },
        "pathOnClient" : {
          "type" : "string",
          "description" : "The complete path of the document, this field is used to determine the FileType. Specify a complete path including the path extension."
        },
        "title" : {
          "type" : "string",
          "description" : "The title of a document."
        },
        "base64Content" : {
          "type" : "string",
          "description" : "The content or body of the document."
        }
      },
      "example" : {
        "relatedSFDCRecordId" : "5000i000000njJjAAI",
        "pathOnClient" : "slalom.png",
        "title" : "slalom",
        "base64Content" : ""
      }
    },
    "WrapperContainer_UnitSearch" : {
      "type" : "object",
      "required" : [ "requestWrapper" ],
      "properties" : {
        "requestWrapper" : {
          "$ref" : "#/definitions/RequestWrapper_UnitSearch"
        }
      }
    },
    "RequestWrapper_UnitSearch" : {
      "type" : "object",
      "required" : [ "unitSearch" ],
      "properties" : {
        "unitSearch" : {
          "$ref" : "#/definitions/UnitSearch_RESI"
        }
      }
    },
    "UnitSearch_RESI" : {
      "type" : "object",
      "required" : [ "propertyCode", "unitNumber" ],
      "properties" : {
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "type" : "string"
        },
        "unitNumber" : {
          "type" : "string"
        },
        "propertyCode" : {
          "type" : "string"
        },
        "accountName" : {
          "type" : "string"
        }
      },
      "example" : {
        "firstName" : "The",
        "lastName" : "Beast",
        "unitNumber" : "197",
        "propertyCode" : "SPP"
      }
    },
    "HOME_OWNER_ASSOCIATION_GET" : {
      "type" : "object",
      "properties" : {
        "Role__c" : {
          "type" : "string",
          "description" : "This is the home owner association members role in the HOA"
        },
        "Account_Name__c" : {
          "type" : "string",
          "description" : "This is the name of the home owner association member"
        },
        "Id" : {
          "type" : "string",
          "description" : "Id of the home owner association member record"
        }
      },
      "example" : {
        "Home_Owner_Association_Members" : {
          "Role__c" : "Role Name",
          "Account_Name__c" : "Mr. Test",
          "Id" : "a2K0i00000002bhEAA"
        }
      }
    },
    "Request_RESI_POST" : {
      "type" : "object",
      "required" : [ "Case_Origin__c", "Id", "Property_Owned__c", "Property_lkp__c", "RecordTypeId", "unit__c" ],
      "properties" : {
        "Id" : {
          "type" : "string"
        },
        "Case_Origin__c" : {
          "type" : "string"
        },
        "Property_lkp__c" : {
          "type" : "string"
        },
        "Property_Owned__c" : {
          "type" : "string"
        },
        "unit__c" : {
          "type" : "string"
        },
        "RecordTypeId" : {
          "type" : "string"
        },
        "more... (omitted)" : {
          "type" : "string"
        }
      },
      "example" : {
        "Id" : "5000i000000cyI0AAI",
        "AccountId" : "0010i000002jLIeAAM",
        "Category__c" : "Parcel",
        "Description" : "New Instruction",
        "Vendor__c" : "a1f0i0000000ANWAA2",
        "request_date__c" : "2019-03-04",
        "time__c" : "15:10:00.000Z",
        "End_Time__c" : "17:10:00.000Z",
        "status" : "Open",
        "Case_Origin__c" : "AM",
        "Property_lkp__c" : "a010i000000U9YEAA0",
        "Property_Owned__c" : "a1C0i0000000VEcEAM",
        "unit__c" : "a030i000000orVSAAY",
        "RecordTypeId" : "0120i0000005jABAAY",
        "Created_By_Digital_Platform_User__c" : "Test User"
      }
    },
    "Request_CommonArea" : {
      "type" : "object",
      "required" : [ "Case_Origin__c", "Id", "Property_Owned__c", "Property_lkp__c", "RecordTypeId", "unit__c" ],
      "properties" : {
        "Id" : {
          "type" : "string"
        },
        "Case_Origin__c" : {
          "type" : "string"
        },
        "Property_lkp__c" : {
          "type" : "string"
        },
        "Property_Owned__c" : {
          "type" : "string"
        },
        "unit__c" : {
          "type" : "string"
        },
        "RecordTypeId" : {
          "type" : "string"
        },
        "more... (omitted)" : {
          "type" : "string"
        }
      },
      "example" : {
        "commonAreaBooking" : {
          "Property_Owned__c" : "a1C0i0000000QfPEAU",
          "Common_Area__c" : "a2E0i0000001hetEAA",
          "Status" : "Approved",
          "time__c" : "13:50:00.000Z",
          "End_Time__c" : "13:55:00.000Z",
          "Request_date__c" : "2019-10-19",
          "End_Date__c" : "2019-10-19"
        }
      }
    },
    "Request_RESI_Update" : {
      "type" : "object",
      "required" : [ "Case_Origin__c", "Id", "Property_Owned__c", "Property_lkp__c", "RecordTypeId", "unit__c" ],
      "properties" : {
        "Id" : {
          "type" : "string"
        },
        "Case_Origin__c" : {
          "type" : "string"
        },
        "Property_lkp__c" : {
          "type" : "string"
        },
        "Property_Owned__c" : {
          "type" : "string"
        },
        "unit__c" : {
          "type" : "string"
        },
        "RecordTypeId" : {
          "type" : "string"
        },
        "more... (omitted)" : {
          "type" : "string"
        }
      },
      "example" : {
        "Id" : "5000i000000cyI0AAI",
        "AccountId" : "0010i000002jLIeAAM",
        "Category__c" : "Parcel",
        "Description" : "New Instruction",
        "Vendor__c" : "a1f0i0000000ANWAA2",
        "request_date__c" : "2019-03-04",
        "time__c" : "15:10:00.000Z",
        "End_Time__c" : "17:10:00.000Z",
        "status" : "Open",
        "Case_Origin__c" : "AM",
        "Property_lkp__c" : "a010i000000U9YEAA0",
        "Property_Owned__c" : "a1C0i0000000VEcEAM",
        "unit__c" : "a030i000000orVSAAY",
        "RecordTypeId" : "0120i0000005jABAAY",
        "Digital_Platform_User_Last_Modified_Date__c" : "2019-03-04",
        "Last_Modified_By_Digital_Platform_User__c" : "Test User 2"
      }
    },
    "Request_RESI" : {
      "type" : "object",
      "required" : [ "Case_Origin__c", "Id", "Property_Owned__c", "Property_lkp__c", "RecordTypeId", "unit__c" ],
      "properties" : {
        "Id" : {
          "type" : "string"
        },
        "Case_Origin__c" : {
          "type" : "string"
        },
        "Property_lkp__c" : {
          "type" : "string"
        },
        "Property_Owned__c" : {
          "type" : "string"
        },
        "unit__c" : {
          "type" : "string"
        },
        "RecordTypeId" : {
          "type" : "string"
        },
        "more... (omitted)" : {
          "type" : "string"
        }
      },
      "example" : {
        "Id" : "5000i000000cyI0AAI",
        "AccountId" : "0010i000002jLIeAAM",
        "Category__c" : "Parcel",
        "Description" : "New Instruction",
        "Vendor__c" : "a1f0i0000000ANWAA2",
        "request_date__c" : "2019-03-04",
        "time__c" : "15:10:00.000Z",
        "End_Time__c" : "17:10:00.000Z",
        "status" : "Open",
        "Case_Origin__c" : "AM",
        "Property_lkp__c" : "a010i000000U9YEAA0",
        "Property_Owned__c" : "a1C0i0000000VEcEAM",
        "unit__c" : "a030i000000orVSAAY",
        "RecordTypeId" : "0120i0000005jABAAY"
      }
    },
    "Unit" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "string"
        },
        "Name" : {
          "type" : "string"
        },
        "Unit_Number__c" : {
          "type" : "string"
        },
        "Property__c.Name" : {
          "type" : "string"
        },
        "more... (omitted)" : {
          "type" : "string"
        }
      },
      "example" : {
        "Id" : "5000i000000cfd8AAA",
        "Name" : "AM-1002",
        "Unit_Number__c" : "1002",
        "Property__c.Name" : "Four Seasons Hotel Casa Medina Bogota"
      }
    },
    "PropertyOwned" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "string",
          "description" : "This is the property owned Salesforce record ID."
        },
        "Unit__c" : {
          "type" : "string",
          "description" : "This is the unit Salesforce record ID"
        },
        "Contact__c" : {
          "type" : "string",
          "description" : "This is the account (resident) Salesforce record ID"
        },
        "Property__c" : {
          "type" : "string",
          "description" : "This is the property Salesforce record ID"
        }
      },
      "example" : {
        "Id" : "a1C1f000001TsvlEAC",
        "Unit__c" : "a031f000000qLMgAAM",
        "Contact__c" : "0011f000006Vuj6AAC",
        "Property__C" : "a011f000000iVGIAA2"
      }
    },
    "fileUploadSuccess" : {
      "type" : "object",
      "properties" : {
        "url" : {
          "type" : "string"
        },
        "size" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "extension" : {
          "type" : "string"
        },
        "contentDistributionId" : {
          "type" : "string"
        }
      },
      "example" : {
        "url" : "/services/apexrest/v1/resi/file/05D0i00000003mXEAQ",
        "size" : "6060",
        "name" : "slalom",
        "extension" : "png",
        "contentDistributionId" : "05D0i00000003mXEAQ"
      }
    },
    "notificationSuccess" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        }
      },
      "example" : {
        "id" : "a2l1f00000029U8AAI"
      }
    },
    "PicklistValue" : {
      "type" : "object",
      "properties" : {
        "label" : {
          "type" : "string",
          "description" : "The displayable value of the picklist to use in UI."
        },
        "value" : {
          "type" : "string",
          "description" : "The value of the picklist to use in the API."
        },
        "validFor" : {
          "type" : "array",
          "description" : "If the picklist is a dependent picklist, the property contains a list of the controlling value indexes for which this value is valid. If the picklist is an independent picklist, the list is empty.",
          "items" : {
            "type" : "integer"
          }
        },
        "attributes" : {
          "type" : "object",
          "description" : "This property might contain a nested response body to help consumers understand the meaning of the picklist value.",
          "properties" : { }
        }
      },
      "example" : {
        "label" : "option 1",
        "value" : "option 1",
        "validFor" : [ 1, 2 ]
      }
    },
    "PicklistValues" : {
      "type" : "object",
      "properties" : {
        "controllerValues" : {
          "type" : "object",
          "description" : "If the picklist is dependent, this property is a map of its immediate controlling field's picklist values to their indexes. If the controlling field is a picklist, the String is the picklist value and the integer is the value's index. If the controlling field is a checkbox, the values in the map are 'false': 0 and 'true': 1. If the picklist is independent, the map is empty.",
          "additionalProperties" : {
            "$ref" : "#/definitions/PicklistValues_controllerValues"
          }
        },
        "defaultValue" : {
          "description" : "The default value for the picklist, or null if there isn't one.",
          "$ref" : "#/definitions/PicklistValue"
        },
        "values" : {
          "type" : "array",
          "description" : "A list of values for this object, record type, field combination.",
          "items" : {
            "$ref" : "#/definitions/PicklistValue"
          }
        }
      },
      "example" : {
        "controllerValues" : { },
        "defaultValue" : {
          "label" : "option 1",
          "value" : "option 1"
        },
        "values" : [ {
          "value" : "3rd party appointment",
          "validFor" : [ ],
          "label" : "3rd party appointment"
        }, {
          "value" : "A la carte dining delivery",
          "validFor" : [ ],
          "label" : "A la carte dining delivery"
        }, {
          "value" : "Car Wash",
          "validFor" : [ ],
          "label" : "Car Wash"
        }, {
          "value" : "Catering",
          "validFor" : [ ],
          "label" : "Catering"
        }, {
          "value" : "Due In",
          "validFor" : [ ],
          "label" : "Due In"
        }, {
          "value" : "Due Out",
          "validFor" : [ ],
          "label" : "Due Out"
        }, {
          "value" : "FB Storage",
          "validFor" : [ ],
          "label" : "F&amp;B Storage"
        } ]
      }
    },
    "PicklistValuesCollection" : {
      "type" : "object",
      "properties" : {
        "picklistFieldValues" : {
          "description" : "A map of field names to Picklist Values response bodies. This map contains all the picklist values for all the picklists of a specified record type, including dependent picklists. If a field isn't a picklist, it isn't represented in the map.",
          "$ref" : "#/definitions/PicklistValues"
        }
      },
      "example" : {
        "picklistFieldValues" : {
          "Status" : {
            "values" : [ {
              "value" : "Open",
              "validFor" : [ ],
              "label" : "Open"
            }, {
              "value" : "Closed",
              "validFor" : [ ],
              "label" : "Closed"
            }, {
              "value" : "Pending",
              "validFor" : [ ],
              "label" : "Pending"
            } ],
            "defaultValue" : {
              "value" : "Open",
              "validFor" : [ ],
              "label" : "Open"
            },
            "controllerValues" : { }
          },
          "Sample__c" : {
            "values" : [ {
              "value" : "Option 1",
              "validFor" : [ 0, 1, 2 ],
              "label" : "Option 1"
            }, {
              "value" : "Option 2",
              "validFor" : [ 0 ],
              "label" : "Option 2"
            }, {
              "value" : "Option 3",
              "validFor" : [ 1, 2 ],
              "label" : "Option 3"
            } ],
            "controllerValues" : {
              "Catering" : 3,
              "Car Wash" : 2,
              "A la carte dining delivery" : 1,
              "3rd party appointment" : 0
            }
          },
          "Category__c" : {
            "values" : [ {
              "value" : "3rd party appointment",
              "validFor" : [ ],
              "label" : "3rd party appointment"
            }, {
              "value" : "A la carte dining delivery",
              "validFor" : [ ],
              "label" : "A la carte dining delivery"
            }, {
              "value" : "Car Wash",
              "validFor" : [ ],
              "label" : "Car Wash"
            }, {
              "value" : "Catering",
              "validFor" : [ ],
              "label" : "Catering"
            } ],
            "controllerValues" : { }
          }
        }
      }
    },
    "propertyResidents" : {
      "type" : "object",
      "properties" : {
        "firstName" : {
          "type" : "string",
          "description" : "This is the residents first name"
        },
        "lastName" : {
          "type" : "string",
          "description" : "This is the residents last name"
        },
        "unitNumber" : {
          "type" : "string",
          "description" : "This is the residents unit number"
        },
        "name" : {
          "type" : "string",
          "description" : "This is the resident's full name or the name of a company account record"
        }
      },
      "example" : {
        "firstName" : "jack",
        "lastName" : "lastName",
        "unitNumber" : "123",
        "name" : "jack middlename lastName"
      }
    },
    "CreateResponse" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "string"
        },
        "CaseNumber" : {
          "type" : "string"
        }
      }
    },
    "ExceptionResponse" : {
      "type" : "object",
      "properties" : {
        "fields" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "message" : {
          "type" : "string"
        },
        "errorCode" : {
          "type" : "string"
        }
      }
    },
    "commonAreaBookings" : {
      "type" : "object",
      "properties" : {
        "Common_Area_Bookings" : {
          "type" : "object",
          "description" : "stores the common area bookings",
          "properties" : { }
        }
      },
      "example" : {
        "Common_Area_Bookings" : [ {
          "attributes" : {
            "type" : "Case",
            "url" : "/services/data/v46.0/sobjects/Case/5000i000000nq86AAA"
          },
          "Property_Owned__c" : "a1C0i0000000bO5EAI",
          "Request_Date__c" : "2019-10-01",
          "Time__c" : "21:00:00.000Z",
          "End_Time__c" : "21:30:00.000Z",
          "Status" : "Approved",
          "Id" : "5000i000000nq86AAA"
        } ]
      }
    },
    "commonAreaRecordNotFound" : {
      "type" : "string",
      "example" : [ {
        "fields" : [ "string" ],
        "message" : "No Common Area was found for the Id provided",
        "errorCode" : "string"
      } ]
    },
    "fileNotFound" : {
      "type" : "string",
      "example" : [ {
        "message" : "File does not exist or the distribution key has expired",
        "errorCode" : "NOT_FOUND"
      } ]
    },
    "PropertyOwnedNoRecordFound" : {
      "type" : "string",
      "example" : [ {
        "fields" : [ "string" ],
        "message" : "No Property owned exists for the id passed",
        "errorCode" : "string"
      } ]
    },
    "PropertyRecordNotFound" : {
      "type" : "string",
      "example" : [ {
        "fields" : [ "string" ],
        "message" : "No matching Property record found.",
        "errorCode" : "string"
      } ]
    },
    "documentLibraryInfo" : {
      "type" : "object",
      "properties" : {
        "Resident_Documents" : {
          "type" : "object",
          "description" : "list of resident assigned documents",
          "properties" : { }
        },
        "Unit_Documents" : {
          "type" : "object",
          "description" : "list of unit assigned documents",
          "properties" : { }
        }
      },
      "example" : {
        "Resident_Documents" : [ {
          "fileDetails" : {
            "url" : "/services/apexrest/v1/resi/file/05D1f0000000SU7EAM",
            "size" : 203387,
            "name" : "Test",
            "extension" : "pdf",
            "contentDistributionId" : "05D1f0000000SU7EAM"
          },
          "documentType" : "Resident_Digital_Document",
          "documentTitle" : "Test",
          "category" : "Association Dues"
        }, {
          "fileDetails" : {
            "url" : "/services/apexrest/v1/resi/file/05D1f0000000SUlEAM",
            "size" : 203387,
            "name" : "TESTER",
            "extension" : "pdf",
            "contentDistributionId" : "05D1f0000000SUlEAM"
          },
          "documentType" : "Resident_Digital_Document",
          "documentTitle" : "TESTER",
          "category" : "Monthly Billing"
        } ],
        "Unit_Documents" : [ {
          "fileDetails" : {
            "url" : "/services/apexrest/v1/resi/file/05D1f0000000SUMEA2",
            "size" : 203387,
            "name" : "Test",
            "extension" : "pdf",
            "contentDistributionId" : "05D1f0000000SUMEA2"
          },
          "documentType" : "Unit_Documentation",
          "documentTitle" : "Test",
          "category" : "Contracts"
        }, {
          "fileDetails" : {
            "url" : "/services/apexrest/v1/resi/file/05D1f0000000SUHEA2",
            "size" : 31455,
            "name" : "unit",
            "extension" : "pdf",
            "contentDistributionId" : "05D1f0000000SUHEA2"
          },
          "documentType" : "Unit_Documentation",
          "documentTitle" : "unit",
          "category" : "Contracts"
        }, {
          "fileDetails" : {
            "url" : "/services/apexrest/v1/resi/file/05D1f0000000SUCEA2",
            "size" : 32497,
            "name" : "TEST",
            "extension" : "jpg",
            "contentDistributionId" : "05D1f0000000SUCEA2"
          },
          "documentType" : "Unit_Documentation",
          "documentTitle" : "TEST",
          "category" : "Floor Plan"
        } ]
      }
    },
    "commonAreasInfo" : {
      "type" : "object",
      "properties" : {
        "Common_Areas" : {
          "type" : "object",
          "description" : "Stores a list of common area records",
          "properties" : { }
        }
      },
      "example" : {
        "Common_Areas" : [ {
          "attachments" : [ {
            "url" : "/services/apexrest/v1/resi/file/05D0i00000003mhEAA",
            "size" : 147396,
            "name" : "Admin Master Guide (1) (2)",
            "extension" : "pdf",
            "contentDistributionId" : "05D0i00000003mhEAA"
          } ],
          "Common_Area" : {
            "attributes" : {
              "type" : "Common_Area__c",
              "url" : "/services/data/v46.0/sobjects/Common_Area__c/a2E0i0000000dvuEAA"
            },
            "Name" : "shared test from south",
            "Maximum_Duration__c" : 200,
            "Bookable_by_Residents__c" : false,
            "Description__c" : "test",
            "Id" : "a2E0i0000000dvuEAA",
            "Common_Business_Hours__r" : {
              "totalSize" : 2,
              "done" : true,
              "records" : [ {
                "attributes" : {
                  "type" : "Common_Business_Hours__c",
                  "url" : "/services/data/v46.0/sobjects/Common_Business_Hours__c/a2I0i0000000a3zEAA"
                },
                "Common_Area__c" : "a2E0i0000000dvuEAA",
                "Id" : "a2I0i0000000a3zEAA",
                "Closing_Hour__c" : "18:15:00.000Z",
                "Day_of_Week__c" : "Monday;Tuesday;Wednesday;Thursday;Friday",
                "Opening_Hour__c" : "07:30:00.000Z"
              }, {
                "attributes" : {
                  "type" : "Common_Business_Hours__c",
                  "url" : "/services/data/v46.0/sobjects/Common_Business_Hours__c/a2I0i0000000a44EAA"
                },
                "Common_Area__c" : "a2E0i0000000dvuEAA",
                "Id" : "a2I0i0000000a44EAA",
                "Closing_Hour__c" : "21:00:00.000Z",
                "Day_of_Week__c" : "Saturday;Sunday",
                "Opening_Hour__c" : "07:45:00.000Z"
              } ]
            }
          }
        }, {
          "attachments" : [ ],
          "Common_Area" : {
            "attributes" : {
              "type" : "Common_Area__c",
              "url" : "/services/data/v46.0/sobjects/Common_Area__c/a2E0i0000001hetEAA"
            },
            "Name" : "Shared on south",
            "Maximum_Duration__c" : 414,
            "Bookable_by_Residents__c" : true,
            "Id" : "a2E0i0000001hetEAA",
            "Common_Business_Hours__r" : {
              "totalSize" : 1,
              "done" : true,
              "records" : [ {
                "attributes" : {
                  "type" : "Common_Business_Hours__c",
                  "url" : "/services/data/v46.0/sobjects/Common_Business_Hours__c/a2I0i0000000a3uEAA"
                },
                "Common_Area__c" : "a2E0i0000001hetEAA",
                "Id" : "a2I0i0000000a3uEAA",
                "Closing_Hour__c" : "06:00:00.000Z",
                "Day_of_Week__c" : "Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday",
                "Opening_Hour__c" : "00:15:00.000Z"
              } ]
            }
          }
        }, {
          "attachments" : [ ],
          "Common_Area" : {
            "attributes" : {
              "type" : "Common_Area__c",
              "url" : "/services/data/v46.0/sobjects/Common_Area__c/a2E0i0000000dvfEAA"
            },
            "Name" : "not shared north2",
            "Maximum_Duration__c" : 3,
            "Bookable_by_Residents__c" : true,
            "Id" : "a2E0i0000000dvfEAA"
          }
        } ]
      }
    },
    "propertyOwnedInfo" : {
      "type" : "object",
      "properties" : {
        "Requests" : {
          "type" : "object",
          "description" : "Stores the requests",
          "properties" : { }
        },
        "Resident" : {
          "type" : "object",
          "description" : "Stores the file details associated with the case record",
          "properties" : { }
        }
      },
      "example" : {
        "Common_Area_Bookings" : [ {
          "attachments" : [ {
            "url" : "/services/apexrest/v1/resi/file/05D0i00000003n2EAA",
            "size" : 147396,
            "name" : "Admin Master Guide (1)",
            "extension" : "pdf",
            "contentDistributionId" : "05D0i00000003n2EAA"
          } ],
          "Common_Area_Booking" : {
            "attributes" : {
              "type" : "Case",
              "url" : "/services/data/v46.0/sobjects/Case/5000i000000nseJAAQ"
            },
            "Common_Area_Name__c" : "Lift 1",
            "Property_Owned__c" : "a1C1f000001ck4MEAQ",
            "Request_Date__c" : "2019-10-08",
            "Time__c" : "21:30:00.000Z",
            "End_Time__c" : "22:00:00.000Z",
            "Status" : "Approved",
            "End_Date__c" : "2019-10-08",
            "Description" : "Common area Request",
            "RecordTypeId" : "0120i0000006N2MAAU",
            "Id" : "5000i000000nseJAAQ"
          }
        } ],
        "Resident" : {
          "profilePhoto" : {
            "url" : "/services/apexrest/v1/resi/file/05D1f0000000SGeEAM",
            "size" : 44986,
            "name" : "Tony Stark",
            "extension" : "jpg",
            "ContentDistributionId" : "05D1f0000000SGeEAM"
          },
          "Property_Owned__c" : {
            "attributes" : {
              "type" : "Property_Owned__c",
              "url" : "/services/data/v47.0/sobjects/Property_Owned__c/a1C1f000001ck4MEAQ"
            },
            "Customer_Type__c" : "Resident-Employee",
            "Contact__c" : "0011f00000747T9AAI",
            "Id" : "a1C1f000001ck4MEAQ",
            "Home_Owner_Association__c" : "a2J0i000000019FEAQ",
            "Home_Owner_Association_Name__c" : "Home Owner Association Name",
            "Contact__r" : {
              "attributes" : {
                "type" : "Account",
                "url" : "/services/data/v47.0/sobjects/Account/0011f00000747T9AAI"
              },
              "Id" : "0011f00000747T9AAI",
              "Full_Name__c" : "His Excellency Tony Iron Man Stark",
              "FirstName" : "Tony",
              "MiddleName" : "Iron Man",
              "LastName" : "Stark",
              "Name" : "Tony Iron Man Stark",
              "Profile_Photo_Content_DocI_d__c" : "0691f0000006t9jAAA"
            }
          }
        },
        "Vehicles_Owned" : [ {
          "profilePhoto" : {
            "url" : "/services/apexrest/v1/resi/file/05D0i000000040bEAA",
            "size" : 87467,
            "name" : "image-2019-05-23-10-51-23-653",
            "extension" : "png",
            "contentDistributionId" : "05D0i000000040bEAA"
          },
          "Vehicle_Drivers" : [ {
            "Driver_Name" : "Super HVAC HVAC Person"
          }, {
            "Driver_Name" : "Ricardo From Golden"
          }, {
            "Driver_Photo" : {
              "url" : "/services/apexrest/v1/resi/file/05D0i000000040aEAA",
              "size" : 55394,
              "name" : "donald-face2",
              "extension" : "png",
              "contentDistributionId" : "05D0i000000040aEAA"
            },
            "Driver_Name" : "John Smith"
          }, {
            "Driver_Photo" : {
              "url" : "05D0i000000040ZEAQ",
              "size" : 10046,
              "name" : "HOMER",
              "extension" : "jpg",
              "contentDistributionId" : "05D0i000000040ZEAQ"
            },
            "Driver_Name" : "Super HVAC HVAC Person"
          } ],
          "Vehicle__c" : {
            "attributes" : {
              "type" : "Vehicle__c",
              "url" : "/services/data/v47.0/sobjects/Vehicle__c/a2B0i0000000iDPEAY"
            },
            "Id" : "a2B0i0000000iDPEAY",
            "Make__c" : "new",
            "Vehicle_Type__c" : "Boat",
            "Model__c" : "youv",
            "Assigned_Drivers__c" : "a1C0i0000000VKzEAM,a1C0i0000000pc3EAA,a1C0i0000000pcDEAQ,a1C0i0000000V9ZEAU",
            "Profile_Photo_Content_Doc_Id__c" : "0690i00000034BZAAY",
            "Resident_Connections__r" : {
              "totalSize" : 4,
              "done" : true,
              "records" : [ {
                "attributes" : {
                  "type" : "Resident_Connection__c",
                  "url" : "/services/data/v47.0/sobjects/Resident_Connection__c/a2c0i0000000ld2AAA"
                },
                "Vehicle__c" : "a2B0i0000000iDPEAY",
                "Id" : "a2c0i0000000ld2AAA",
                "Property_Owned__c" : "a1C0i0000000V9ZEAU",
                "Property_Owned__r" : {
                  "attributes" : {
                    "type" : "Property_Owned__c",
                    "url" : "/services/data/v47.0/sobjects/Property_Owned__c/a1C0i0000000V9ZEAU"
                  },
                  "Id" : "a1C0i0000000V9ZEAU",
                  "Contact__c" : "0010i000002kixCAAQ",
                  "Contact__r" : {
                    "attributes" : {
                      "type" : "Account",
                      "url" : "/services/data/v47.0/sobjects/Account/0010i000002kixCAAQ"
                    },
                    "Id" : "0010i000002kixCAAQ",
                    "Name" : "Super HVAC HVAC Person",
                    "Profile_Photo_Content_DocI_d__c" : "0690i0000002g5XAAQ"
                  }
                }
              }, {
                "attributes" : {
                  "type" : "Resident_Connection__c",
                  "url" : "/services/data/v47.0/sobjects/Resident_Connection__c/a2c0i0000000lcsAAA"
                },
                "Vehicle__c" : "a2B0i0000000iDPEAY",
                "Id" : "a2c0i0000000lcsAAA",
                "Property_Owned__c" : "a1C0i0000000pc3EAA",
                "Property_Owned__r" : {
                  "attributes" : {
                    "type" : "Property_Owned__c",
                    "url" : "/services/data/v47.0/sobjects/Property_Owned__c/a1C0i0000000pc3EAA"
                  },
                  "Id" : "a1C0i0000000pc3EAA",
                  "Contact__c" : "0010i000002hHtcAAE",
                  "Contact__r" : {
                    "attributes" : {
                      "type" : "Account",
                      "url" : "/services/data/v47.0/sobjects/Account/0010i000002hHtcAAE"
                    },
                    "Id" : "0010i000002hHtcAAE",
                    "Name" : "Ricardo From Golden"
                  }
                }
              }, {
                "attributes" : {
                  "type" : "Resident_Connection__c",
                  "url" : "/services/data/v47.0/sobjects/Resident_Connection__c/a2c0i0000000lcZAAQ"
                },
                "Vehicle__c" : "a2B0i0000000iDPEAY",
                "Id" : "a2c0i0000000lcZAAQ",
                "Property_Owned__c" : "a1C0i0000000VKzEAM",
                "Property_Owned__r" : {
                  "attributes" : {
                    "type" : "Property_Owned__c",
                    "url" : "/services/data/v47.0/sobjects/Property_Owned__c/a1C0i0000000VKzEAM"
                  },
                  "Id" : "a1C0i0000000VKzEAM",
                  "Contact__c" : "0010i000003WW6TAAW",
                  "Contact__r" : {
                    "attributes" : {
                      "type" : "Account",
                      "url" : "/services/data/v47.0/sobjects/Account/0010i000003WW6TAAW"
                    },
                    "Id" : "0010i000003WW6TAAW",
                    "Name" : "John Smith",
                    "Profile_Photo_Content_DocI_d__c" : "0690i0000002a1AAAQ"
                  }
                }
              }, {
                "attributes" : {
                  "type" : "Resident_Connection__c",
                  "url" : "/services/data/v47.0/sobjects/Resident_Connection__c/a2c0i0000000lcxAAA"
                },
                "Vehicle__c" : "a2B0i0000000iDPEAY",
                "Id" : "a2c0i0000000lcxAAA",
                "Property_Owned__c" : "a1C0i0000000pcDEAQ",
                "Property_Owned__r" : {
                  "attributes" : {
                    "type" : "Property_Owned__c",
                    "url" : "/services/data/v47.0/sobjects/Property_Owned__c/a1C0i0000000pcDEAQ"
                  },
                  "Id" : "a1C0i0000000pcDEAQ",
                  "Contact__c" : "0010i000002kixCAAQ",
                  "Contact__r" : {
                    "attributes" : {
                      "type" : "Account",
                      "url" : "/services/data/v47.0/sobjects/Account/0010i000002kixCAAQ"
                    },
                    "Id" : "0010i000002kixCAAQ",
                    "Name" : "Super HVAC HVAC Person",
                    "Profile_Photo_Content_DocI_d__c" : "0690i0000002g5XAAQ"
                  }
                }
              } ]
            }
          }
        } ],
        "Requests" : [ {
          "Case" : {
            "attributes" : {
              "type" : "Case",
              "url" : "/services/data/v46.0/sobjects/Case/5000i000000njYoAAI"
            },
            "Id" : "5000i000000njYoAAI",
            "Account_Name__c" : "His Royal Highness Squidward Tentacles",
            "Recurrence_End_Date__c" : "2019-11-01",
            "Recurrence_End_Time__c" : "03:00:00.000Z",
            "Recurrence_Interval__c" : "1",
            "Recurrence_Start_Date__c" : "2019-10-01",
            "Recurrence_Start_Time__c" : "00:15:00.000Z",
            "Recurrence_Type__c" : "Weekly",
            "Request_Date__c" : "2019-09-19",
            "End_Time__c" : "00:15:00.000Z",
            "Time__c" : "00:15:00.000Z",
            "Category__c" : "Accounting/Authorized on account",
            "Description" : "Squid",
            "RecordTypeId" : "0120i0000005CwCAAU",
            "RecordType" : {
              "attributes" : {
                "type" : "RecordType",
                "url" : "/services/data/v46.0/sobjects/RecordType/0120i0000005CwCAAU"
              },
              "Id" : "0120i0000005CwCAAU",
              "DeveloperName" : "Home_Requests"
            }
          },
          "attachments" : [ {
            "size" : 207050,
            "name" : "AppBuilder_Samples",
            "extension" : "pdf",
            "ContentDistributionId" : "05D0i00000003U8EAI"
          } ]
        } ],
        "Notification_Preference" : {
          "attributes" : {
            "type" : "Notification__c",
            "url" : "/services/data/v47.0/sobjects/Notification__c/a2L0i00000006j3EAA"
          },
          "Property_Owned__c" : "a1C1f000001ck4MEAQ",
          "Notify_By__c" : "Email",
          "Common_Area_Bookings__c" : true,
          "Grocery_items__c" : false,
          "Laundry_Dry_Cleaning__c" : false,
          "Pick_up__c" : false,
          "Vehicle_Services__c" : false,
          "Unit_Access__c" : false,
          "Florists_Plants__c" : false,
          "Keys__c" : false,
          "Packages_and_Deliveries__c" : false,
          "Resident_Pick_ups__c" : false,
          "Resident_Purchase_and_Errands__c" : false,
          "Id" : "a2L0i00000006j3EAA"
        },
        "Pets" : [ {
          "profilePhoto" : {
            "url" : "/services/apexrest/v1/resi/file/05D0i00000003t9EAA",
            "size" : 1781996,
            "name" : "homer",
            "extension" : "png",
            "contentDistributionId" : "05D0i00000003t9EAA"
          },
          "attachments" : [ {
            "url" : "/services/apexrest/v1/resi/file/05D0i00000003s1EAA",
            "size" : 480079,
            "name" : "Destination Success",
            "extension" : "png",
            "contentDistributionId" : "05D0i00000003s1EAA"
          } ],
          "Pet__c" : {
            "attributes" : {
              "type" : "Pet__c",
              "url" : "/services/data/v47.0/sobjects/Pet__c/a2D0i0000000XtxEAE"
            },
            "Name" : "Test",
            "Active__c" : true,
            "Category__c" : "Dog",
            "Insurance_Start_Date__c" : "2019-09-21",
            "Insurance_Expiry_Date__c" : "2019-09-30",
            "Notes__c" : "This is a test note",
            "Profile_Photo_Content_Doc_Id__c" : "0690i00000033qWAAQ",
            "Id" : "a2D0i0000000XtxEAE"
          }
        }, {
          "profilePhoto" : {
            "url" : "/services/apexrest/v1/resi/file/05D0i00000003tAEAQ",
            "size" : 22028,
            "name" : "addressHistory",
            "extension" : "png",
            "contentDistributionId" : "05D0i00000003tAEAQ"
          },
          "attachments" : [ ],
          "Pet__c" : {
            "attributes" : {
              "type" : "Pet__c",
              "url" : "/services/data/v47.0/sobjects/Pet__c/a2D0i0000000YOCEA2"
            },
            "Name" : "Max",
            "Active__c" : true,
            "Category__c" : "Fish",
            "Profile_Photo_Content_Doc_Id__c" : "0690i00000033tGAAQ",
            "Id" : "a2D0i0000000YOCEA2"
          }
        } ]
      }
    },
    "PicklistValues_controllerValues" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string"
        },
        "value" : {
          "type" : "integer"
        }
      }
    }
  }
}